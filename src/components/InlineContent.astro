---
import type { ContentBlock } from "@types";
export interface Props {
  id?: string;
  classList?: string;
  block: ContentBlock;
}

const { id, classList, block } = Astro.props;

// Serialize block data for use in the web component
const blockData = JSON.stringify(block);
---

<inline-mixed-content
  data-block={blockData}
  data-classlist={classList}
  data-id={id}
>
</inline-mixed-content>

<script>
  import {
    isMixedBlock,
    transformMixedBlockToHTMLObject,
  } from "@lib/utils";
  import { renderHTMLObject, renderHTMLObjects} from "@lib/utils";
  // Utility function for rendering HTMLObject or MixedBlock

  class InlineMixedContent extends HTMLElement {
    constructor() {
      super();

      // Parse dataset attributes
      const block = this.dataset.block ? JSON.parse(this.dataset.block) : {};
      const classList = this.dataset.classlist || "";
      const id = this.dataset.id || "";
      // check if is mixed block or html block
      if (isMixedBlock(block)) {
        const convertedBlock = transformMixedBlockToHTMLObject(block);
        // Render parsed content
        const parsedContent = renderHTMLObjects(convertedBlock);

        // Set inner HTML
        this.innerHTML = parsedContent;
      } else {
        // Render parsed content
        const parsedContent = Array.isArray(block)
          ? block.map((item) => renderHTMLObject(item)).join("")
          : renderHTMLObject(block);
        // Set inner HTML
        this.innerHTML = parsedContent;
      }
      // Apply classList and ID to the parent block element
      if (classList) this.className += ` ${classList}`;
      if (id) this.id = id;
    }
  }

  // Define the custom element
  window.customElements.define("inline-mixed-content", InlineMixedContent);
</script>
